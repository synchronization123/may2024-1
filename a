If you only need to identify the table names where the substring 'adfs' appears, without specifying the column data type, you can simplify the procedure to focus solely on table and column names. Hereâ€™s how you can modify the procedure:

```sql
DELIMITER //

CREATE PROCEDURE FindTablesContainingSubstring()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE tableName VARCHAR(255);
    DECLARE columnName VARCHAR(255);
    DECLARE hasMatch BOOLEAN;

    -- Temporary table to store table names
    CREATE TEMPORARY TABLE IF NOT EXISTS TablesWithSubstring (
        TABLE_NAME VARCHAR(255)
    );

    DECLARE cur1 CURSOR FOR
        SELECT TABLE_NAME, COLUMN_NAME
        FROM INFORMATION_SCHEMA.COLUMNS
        WHERE TABLE_SCHEMA = 'crm';

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    OPEN cur1;

    read_loop: LOOP
        FETCH cur1 INTO tableName, columnName;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Check if 'adfs' is present in any column
        SET @sql = CONCAT('SELECT COUNT(*) INTO @has_match FROM ', tableName, ' WHERE ', columnName, ' LIKE "%adfs%"');
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

        -- If there is a match, store the table name
        IF @has_match > 0 THEN
            INSERT INTO TablesWithSubstring (TABLE_NAME) VALUES (tableName);
        END IF;
    END LOOP;

    CLOSE cur1;

    -- Select all table names with matches
    SELECT DISTINCT TABLE_NAME FROM TablesWithSubstring;

    -- Drop the temporary table
    DROP TEMPORARY TABLE IF EXISTS TablesWithSubstring;
END//

DELIMITER ;
```

### Explanation:

- **Temporary Table**: We create a temporary table `TablesWithSubstring` to store table names where the substring 'adfs' is found.
- **Cursor and Loop**: We iterate over all columns in all tables (`INFORMATION_SCHEMA.COLUMNS`) within the 'crm' database schema.
- **Dynamic SQL**: For each column, we dynamically construct a SQL query to check if the column contains the substring 'adfs'.
- **Storing Results**: If a match is found in any column of a table, we insert the table name into the `TablesWithSubstring` temporary table.
- **Final Selection**: At the end of the procedure, we select and display distinct table names from the `TablesWithSubstring` table.
- **Cleanup**: Finally, we drop the temporary table to clean up after the procedure.

### Running the Procedure:

1. Execute `CALL FindTablesContainingSubstring();` to start the procedure.
2. It will populate the `TablesWithSubstring` temporary table with the names of tables where 'adfs' is found in any column.
3. The procedure then selects and displays the distinct table names.

This streamlined approach should meet your requirement of identifying the table names where the substring 'adfs' appears, without focusing on specific column data types. Adjust the database schema (`crm`) as necessary to match your environment. If you have any further questions or issues, feel free to ask!